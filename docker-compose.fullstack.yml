version: "3.9"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: solara
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  nestjs-service:
    build: ./nestjs-service
    command: npm run start:dev
    volumes:
      - ./nestjs-service:/app
      - ./output:/app/output  # Mount output folder for serving images
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CORS_ORIGIN=http://localhost:4200
    depends_on:
      - postgres
      - python-generator
    networks:
      - app-network

  python-generator:
    build: ./python-generator
    command: python app.py
    volumes:
      - ./python-generator:/app
      - ./output:/app/output
    environment:
      - POSTGRES_HOST=postgres
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      - postgres
    networks:
      - app-network

  # Angular Frontend UI
  angular-frontend:
    build: 
      context: ./angular-frontend
      dockerfile: Dockerfile.dev
    command: ng serve --host 0.0.0.0 --port 4200 --configuration=development
    volumes:
      - ./angular-frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:3000
    depends_on:
      - nestjs-service
    networks:
      - app-network

  # Production build of Angular app (optional)
  angular-frontend-prod:
    build: 
      context: ./angular-frontend
      dockerfile: Dockerfile.prod
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
      - API_URL=http://localhost:3000
    depends_on:
      - nestjs-service
    networks:
      - app-network
    profiles:
      - production

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge